// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  fullName          String
  image             String?
  role              Role               @default(USER)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  posts             Post[]
  comments          Comment[]
  savedCalculations SavedCalculation[]
  SubscriptionToken SubscriptionToken?

  @@map("user")
}

model SubscriptionToken {
  id        String    @id @unique
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  endpoint  String
  p256dh    String
  auth      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("subscription_token")
}

model SavedCalculation {
  id                 String              @id @unique
  user               User                @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  deletedAt          DateTime?
  calculationDetails CalculationDetail[]

  @@map("saved_calculation")
}

model CalculationDetail {
  id                 String           @id @unique
  SavedCalculation   SavedCalculation @relation(fields: [savedCalculationId], references: [id], onDelete: Cascade)
  savedCalculationId String
  material           Material         @relation(fields: [materialId], references: [id])
  materialId         String
  itemName           String
  weight             Decimal          @db.Decimal(10, 2)
  calculatedCn       Decimal          @db.Decimal(10, 2)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?

  @@map("calculation_detail")
}

model Material {
  id                 String              @id @unique
  name               String              @unique
  carbon             Decimal             @db.Decimal(10, 2)
  nitrogen           Decimal             @db.Decimal(10, 2)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  deletedAt          DateTime?
  calculationDetails CalculationDetail[]

  @@map("material")
}

model Post {
  id          String    @id @unique
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  author      String
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  tags        Tag[]
  comments    Comment[]

  @@map("post")
}

model Tag {
  id        String    @id @unique
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  posts     Post[]

  @@map("tag")
}

model Comment {
  id        String    @id @unique
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  author    String
  message   String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    String

  @@index([parentId])
  @@map("comment")
}
